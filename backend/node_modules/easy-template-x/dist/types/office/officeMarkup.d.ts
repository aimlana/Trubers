import { XmlGeneralNode, XmlNode, XmlTextNode } from "src/xml";
export declare class OfficeMarkup {
    readonly query: Query;
    readonly modify: Modify;
}
declare class Query {
    isTextNode(node: XmlNode): boolean;
    isRunNode(node: XmlNode): boolean;
    isRunPropertiesNode(node: XmlNode): boolean;
    isTableCellNode(node: XmlNode): boolean;
    isParagraphNode(node: XmlNode): boolean;
    isParagraphPropertiesNode(node: XmlNode): boolean;
    isListParagraph(paragraphNode: XmlNode): boolean;
    findParagraphPropertiesNode(paragraphNode: XmlNode): XmlNode;
    firstTextNodeChild(node: XmlNode): XmlNode;
    containingTextNode(node: XmlTextNode): XmlGeneralNode;
    containingRunNode(node: XmlNode): XmlNode;
    containingParagraphNode(node: XmlNode): XmlNode;
    containingTableRowNode(node: XmlNode): XmlNode;
    containingTableCellNode(node: XmlNode): XmlNode;
    containingTableNode(node: XmlNode): XmlNode;
    isEmptyTextNode(node: XmlNode): boolean;
    isEmptyRun(node: XmlNode): boolean;
}
declare class Modify {
    splitTextNode(textNode: XmlTextNode, splitIndex: number, addBefore: boolean): XmlTextNode;
    splitParagraphByTextNode(paragraph: XmlNode, textNode: XmlTextNode, removeTextNode: boolean): [XmlNode, XmlNode];
    joinTextNodesRange(from: XmlTextNode, to: XmlTextNode): void;
    joinParagraphs(first: XmlNode, second: XmlNode): void;
    setSpacePreserveAttribute(node: XmlGeneralNode): void;
    removeTag(textNode: XmlTextNode): void;
}
export declare const officeMarkup: OfficeMarkup;
export {};
